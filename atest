local heartbeatConnection

task.spawn(function()
    while task.wait(0) do
        if getgenv().AutoFarm then
            local mobsFolder = workspace:WaitForChild("Objects"):WaitForChild("Mobs")
            local targetHumanoid
            local player = game:GetService("Players").LocalPlayer
            local runService = game:GetService("RunService")
            local replicatedStorage = game:GetService("ReplicatedStorage")
            
            local playerCharacter = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = playerCharacter:WaitForChild("HumanoidRootPart")
            local playerHumanoid = playerCharacter:WaitForChild("Humanoid")
            local combatRemote = replicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("M1")
            
            local function findTargetHumanoid()
                for _, mob in ipairs(mobsFolder:GetChildren()) do
                    local humanoid = mob:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        return humanoid
                    end
                end
                return nil
            end
            
            local function calculateOffset()
                return Vector3.new(0, 0, 5)
            end
            
            local function followTarget(targetHumanoid)
                if targetHumanoid and targetHumanoid.Parent then
                    local targetRootPart = targetHumanoid.Parent:FindFirstChild("HumanoidRootPart")
                    if targetRootPart then
                        local targetCFrame = targetRootPart.CFrame
                        local offset = calculateOffset()
                        local followCFrame = targetCFrame * CFrame.new(offset)
            
                        humanoidRootPart.CFrame = CFrame.new(followCFrame.Position, targetRootPart.Position)
                    end
                end
            end
            
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
                heartbeatConnection = nil
            end

            heartbeatConnection = runService.Heartbeat:Connect(function()
                if not getgenv().AutoFarm then
                    if heartbeatConnection then
                        heartbeatConnection:Disconnect()
                        heartbeatConnection = nil
                    end
                    return
                end

                if not targetHumanoid or not targetHumanoid.Parent or targetHumanoid.Health <= 0 then
                    targetHumanoid = findTargetHumanoid()
                end
            
                if targetHumanoid then
                    followTarget(targetHumanoid)
            
                    local argsTemplate = {
                        [2] = {
                            [1] = targetHumanoid,
                            [2] = playerHumanoid
                        }
                    }
            
                    for number = 1, 4 do
                        argsTemplate[1] = number
                        combatRemote:FireServer(unpack(argsTemplate))
                    end
                end
            end)
        end
    end
end)


task.spawn(function()
    while task.wait(0) do
        if getgenv().AutoAcceptQuest then
            if not game:GetService("Players").LocalPlayer.ReplicatedTempData:FindFirstChild('quest') then 
                for _, k in pairs(workspace.Objects.MissionItems:GetChildren()) do
                if k.Name == game.Players.LocalPlayer.Name then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = k.CFrame
                else
                    game:GetService("Players").LocalPlayer.ReplicatedData.level.Value = 420

                    local player = game:GetService("Players").LocalPlayer
                    local replicatedStorage = game:GetService("ReplicatedStorage")
                    local questRemote = replicatedStorage:WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("AcceptQuest")
                    local missionsGui = player.PlayerGui:WaitForChild("Missions").Frame.Main.Cards
                    local setsFolder = player.PlayerGui.Missions.Frame.Sidebar.Sets
                    local character = workspace.Objects.Characters:FindFirstChild(player.Name)

                    if questRemote then

                    else

                        break
                    end


                    local function getSetName()
                        for _, child in ipairs(setsFolder:GetChildren()) do
                            if child:IsA("GuiObject") and child.BackgroundColor3 == Color3.fromRGB(28, 48, 108) then
                                return child.Name
                            end
                        end
                        return "Default Set"
                    end


                    local function calculateDifficulty(questCard)
                        local difficulty = 0
                        local stars = questCard.Back.Stars
                        for _, star in ipairs(stars:GetChildren()) do
                            if star:IsA("GuiObject") and star.Visible then
                                difficulty = difficulty + 1
                            end
                        end
                        return difficulty
                    end
                        
                    local function determineSubtitle(questCard)
                        return questCard.Back.Subtitle.Text
                    end
                        
                    local function determineType(questCard)
                        return questCard.Back.Title.Text
                    end
                        
                    local function getRewards(questCard)
                        local rewardLabel = questCard.Back:FindFirstChild("RewardsText")
                        if rewardLabel and rewardLabel:IsA("TextLabel") then
                            local rewardsText = rewardLabel.Text

                            local cash = tonumber(rewardsText:match("%$(%d+)")) or 0
                            local exp = tonumber(rewardsText:match("(%d+) EXP")) or 0
                            local essence = tonumber(rewardsText:match("(%d+) Mission Essence")) or 0

                            return cash, exp, essence
                        else
                            return 0, 0, 0
                        end
                    end
                        
                    local function getPlayerLevel()
                        if character then
                            local levelText = character:FindFirstChild("HumanoidRootPart"):FindFirstChild("Health"):FindFirstChild("Level").Text
                            local level = tonumber(levelText:match("%d+")) or 0
                            return level
                        end
                        return 0
                    end
                        
                    local function autoAcceptQuest()
                            local playerLevel = getPlayerLevel()
                            local setName = getSetName() 
                            for i = 1, 3 do
                                local questCard = missionsGui:FindFirstChild("QuestCard" .. i)
                                if questCard then
                                    local difficulty = calculateDifficulty(questCard)
                                    local subtitle = determineSubtitle(questCard)
                                    local questType = determineType(questCard)
                                    local cash, exp, essence = getRewards(questCard)

                                    local args = {
                                        [1] = {
                                            ["type"] = questType,
                                            ["set"] = setName, 
                                            ["rewards"] = {
                                                ["essence"] = essence,
                                                ["cash"] = cash,
                                                ["exp"] = exp,
                                                ["chestMeter"] = 55
                                            },
                                            ["rewardsText"] = string.format("$%d | %d EXP | %d Mission Essence", cash, exp, essence),
                                            ["difficulty"] = difficulty,
                                            ["title"] = questType,
                                            ["level"] = playerLevel,
                                            ["subtitle"] = subtitle,
                                            ["grade"] = "Non Sorcerer"
                                        }
                                    }

                                    questRemote:InvokeServer(unpack(args))

                                    autoAcceptQuest()
                                else

                                end
                            end
                        end
                    end
                end
            end
            
        end
    end
end)


local MacLib = loadstring(game:HttpGet("https://github.com/biggaboy212/Maclib/releases/latest/download/maclib.txt"))()

local Window = MacLib:Window({
	Title = "VintuHub | Jujutsu Infinite",
	Subtitle = "Free Version | 0.0.0",
	Size = UDim2.fromOffset(868, 650),
	DragStyle = 1,
	DisabledWindowControls = {},
	ShowUserInfo = true,
	Keybind = Enum.KeyCode.RightControl,
	AcrylicBlur = true,
})

local tabGroups = {
	TabGroup1 = Window:TabGroup()
}

local tabs = {
	Main = tabGroups.TabGroup1:Tab({ Name = "Main"}),
	Boss = tabGroups.TabGroup1:Tab({ Name = "Boss ONLY!"}),
	Investigations = tabGroups.TabGroup1:Tab({ Name = "Investigations ONLY!"}),
	Misc = tabGroups.TabGroup1:Tab({ Name = "Misc"}),
	Teleport = tabGroups.TabGroup1:Tab({ Name = "Teleport"}),
	Player = tabGroups.TabGroup1:Tab({ Name = "Player"})
}

local sections = {
    FarmSection = tabs.Main:Section({ Side = "Left" }),
    QuestSection = tabs.Main:Section({ Side = "Right" }),
	PlayerSection = tabs.Player:Section({ Side = "Left" }),
	NpcsSection = tabs.Teleport:Section({ Side = "Right" }),
    PortalSection = tabs.Teleport:Section({ Side = "Left" }), -- Added Portal section
}

sections.PlayerSection:Header({
    Name = "Player"
})

sections.NpcsSection:Header({
    Name = "NPCs"
})

sections.PortalSection:Header({
    Name = "Portals"
})

-- Player Sections Function // Toggle

sections.QuestSection:Toggle({
	Name = "Auto Accept Quest",
	Default = false,
	Callback = function(value)
        getgenv().AutoAcceptQuest = value  
	end,
}, "AutoAcceptQuestToggle")

sections.FarmSection:Toggle({
	Name = "Auto Farm Mob (Random)",
	Default = false,
	Callback = function(value)
        getgenv().AutoFarm = value  
	end,
}, "AutoFarmMobToggle")

local auraSphere
local auraDistance = 20 -- Default aura distance
local auraTransparency = 0.5 -- Default transparency for the aura sphere
local heartbeatConnection
local killAuraEnabled = false

-- Create Aura Sphere
local function createAuraSphere()
    if auraSphere then
        auraSphere:Destroy()
    end
    auraSphere = Instance.new("Part")
    auraSphere.Shape = Enum.PartType.Ball
    auraSphere.Size = Vector3.new(auraDistance * 2, auraDistance * 2, auraDistance * 2)
    auraSphere.Color = Color3.fromRGB(255, 0, 0) -- Red sphere
    auraSphere.Transparency = auraTransparency
    auraSphere.Anchored = true
    auraSphere.CanCollide = false
    auraSphere.Parent = workspace
end

-- Update Aura Sphere's Position to the Player
local function updateAuraSphere(position)
    if auraSphere then
        auraSphere.Position = position
    end
end

-- Find Closest Target in Range
local function findClosestTarget(playerPosition, mobsFolder, maxDistance)
    local closestMob = nil
    local closestDistance = maxDistance

    for _, mob in ipairs(mobsFolder:GetChildren()) do
        local humanoid = mob:FindFirstChild("Humanoid")
        local rootPart = mob:FindFirstChild("HumanoidRootPart")
        if humanoid and rootPart and humanoid.Health > 0 then
            local distance = (rootPart.Position - playerPosition).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestMob = humanoid
            end
        end
    end

    return closestMob
end

-- Toggle Kill Aura
sections.FarmSection:Toggle({
    Name = "Kill Aura",
    Default = false,
    Callback = function(value)
        killAuraEnabled = value
        if not value and auraSphere then
            auraSphere:Destroy()
            auraSphere = nil
        elseif value then
            createAuraSphere()
        end
    end,
}, "KillAuraToggle")

-- Slider for Aura Size
sections.FarmSection:Slider({
    Name = "Aura Distance",
    Default = 20,
    Minimum = 5,
    Maximum = 1000,
    DisplayMethod = "Round",
    Callback = function(value)
        auraDistance = value
        if auraSphere then
            auraSphere.Size = Vector3.new(auraDistance * 2, auraDistance * 2, auraDistance * 2)
        end
    end,
}, "AuraDistanceSlider")

-- Slider for Aura Transparency
sections.FarmSection:Slider({
    Name = "Aura Transparency",
    Default = 0.5,
    Minimum = 0,
    Maximum = 1,
    DisplayMethod = "Round",
    Precision = 2,
    Callback = function(value)
        auraTransparency = value
        if auraSphere then
            auraSphere.Transparency = auraTransparency
        end
    end,
}, "AuraTransparencySlider")

task.spawn(function()
    while task.wait(0) do
        if killAuraEnabled then
            local mobsFolder = workspace:WaitForChild("Objects"):WaitForChild("Mobs")
            local player = game:GetService("Players").LocalPlayer
            local humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
            local playerHumanoid = player.Character:WaitForChild("Humanoid")
            local combatRemote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("M1")

            -- Ensure the aura sphere is updated to player's position
            updateAuraSphere(humanoidRootPart.Position)

            if heartbeatConnection then
                heartbeatConnection:Disconnect()
                heartbeatConnection = nil
            end

            heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local targetHumanoid = findClosestTarget(humanoidRootPart.Position, mobsFolder, auraDistance)

                if targetHumanoid then
                    -- Fire attacks on the target
                    local argsTemplate = {
                        [2] = {
                            [1] = targetHumanoid,
                            [2] = playerHumanoid
                        }
                    }

                    for number = 1, 4 do
                        argsTemplate[1] = number
                        combatRemote:FireServer(unpack(argsTemplate))
                    end
                end
            end)
        elseif not killAuraEnabled and heartbeatConnection then
            heartbeatConnection:Disconnect()
            heartbeatConnection = nil
        end
    end
end)


-- Variable to store the original cash value
local originalCashValue

-- Add a toggle for changing cash
sections.PlayerSection:Toggle({
	Name = "Infinite Cash",
	Default = false,
	Callback = function(value)
		local player = game:GetService("Players").LocalPlayer
		local playerCash = player:WaitForChild("ReplicatedData"):WaitForChild("cash")
		
		if value then
			-- Save the original cash value
			originalCashValue = playerCash.Value
			-- Set cash to 999,999,999,999
			playerCash.Value = 999999999999
		else
			-- Restore the original cash value
			if originalCashValue then
				playerCash.Value = originalCashValue
			end
		end
	end,
}, "CashToggle")

-- Add a Walkspeed Slider
sections.PlayerSection:Slider({
	Name = "Walkspeed",
	Default = 16, -- Default Roblox walk speed
	Minimum = 0, -- Minimum speed
	Maximum = 100, -- Maximum speed
	DisplayMethod = "Percent",
	Callback = function(value)
		-- Get the player and their character
		local player = game:GetService("Players").LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoid = character:WaitForChild("Humanoid")

		-- Update walkspeed
		humanoid.WalkSpeed = value
	end,
}, "WalkspeedSlider")

-- Add Fly Toggle and Slider for AZERTY Keybinds
local flying = false
local flySpeed = 50
local flyConnection

sections.PlayerSection:Toggle({
    Name = "Fly",
    Default = false,
    Callback = function(value)
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        if value then
            -- Enable flying
            flying = true

            -- Create a function for flying
            flyConnection = game:GetService("RunService").RenderStepped:Connect(function()
                if flying then
                    local moveDirection = Vector3.new(
                        game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Z) and 1 or game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) and -1 or 0,
                        game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) and 1 or game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftShift) and -1 or 0,
                        game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Q) and -1 or game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) and 1 or 0
                    )
                    humanoidRootPart.Velocity = moveDirection * flySpeed
                else
                    humanoidRootPart.Velocity = Vector3.zero
                end
            end)
        else
            -- Disable flying
            flying = false
            if flyConnection then
                flyConnection:Disconnect()
                flyConnection = nil
            end
            humanoidRootPart.Velocity = Vector3.zero
        end
    end,
}, "FlyToggle")

sections.PlayerSection:Slider({
    Name = "Fly Speed",
    Default = 50, -- Default fly speed
    Minimum = 10, -- Minimum speed
    Maximum = 200, -- Maximum speed
    DisplayMethod = "Percent",
    Callback = function(value)
        -- Update fly speed
        flySpeed = value
    end,
}, "FlySpeedSlider")

-- Teleport Section Features
local npcNames = {}

local function updateNPCList()
    npcNames = {}
    for _, npc in ipairs(workspace:WaitForChild("Objects"):WaitForChild("NPCs"):GetChildren()) do
        if npc:IsA("Model") then
            table.insert(npcNames, npc.Name)
        end
    end
end

updateNPCList()

local selectedNPC
sections.NpcsSection:Dropdown({
    Name = "Select NPC",
    Search = true,
    Multi = false,
    Required = true,
    Options = npcNames,
    Default = {},
    Callback = function(selected)
        selectedNPC = selected
    end,
}, "NPCTeleportDropdown")

sections.NpcsSection:Button({
    Name = "Teleport to NPC",
    Callback = function()
        if selectedNPC then
            local npc = workspace:WaitForChild("Objects"):WaitForChild("NPCs"):FindFirstChild(selectedNPC)
            if npc and npc:IsA("Model") and npc:FindFirstChild("HumanoidRootPart") then
                local player = game:GetService("Players").LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                humanoidRootPart.CFrame = npc.HumanoidRootPart.CFrame
            else
                warn("NPC not found or does not have a HumanoidRootPart.")
            end
        else
            warn("No NPC selected.")
        end
    end,
}, "TeleportButton")

-- Periodic Updates for NPC List
task.spawn(function()
    while task.wait(5) do
        updateNPCList()
    end
end)

-- Portal Teleport Section
local portalNames = {}

local function updatePortalList()
    portalNames = {}
    for _, portal in ipairs(workspace:WaitForChild("Objects"):WaitForChild("Portals"):GetDescendants()) do
        if portal:IsA("BasePart") then
            table.insert(portalNames, portal.Name)
        end
    end
end

updatePortalList()

local selectedPortal
sections.PortalSection:Dropdown({
    Name = "Select Portal",
    Search = true,
    Multi = false,
    Required = true,
    Options = portalNames,
    Default = {},
    Callback = function(selected)
        selectedPortal = selected
    end,
}, "PortalTeleportDropdown")

sections.PortalSection:Button({
    Name = "Teleport to Portal",
    Callback = function()
        if selectedPortal then
            local portal = workspace:WaitForChild("Objects"):WaitForChild("Portals"):FindFirstChild(selectedPortal, true)
            if portal and portal:IsA("BasePart") then
                local player = game:GetService("Players").LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                humanoidRootPart.CFrame = portal.CFrame
            else
                warn("Portal not found or is not a BasePart.")
            end
        else
            warn("No portal selected.")
        end
    end,
}, "PortalTeleportButton")

-- Periodic Updates for Portal List
task.spawn(function()
    while task.wait(5) do
        updatePortalList()
    end
end)
